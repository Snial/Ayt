{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Notes on Strings in AYT.\
\
One of the major complexities in writing a version of Forth for word-oriented machines is that with a word address you can't individually address every byte within the address space. You would need n+1 bits in the word if there are two bytes per word (as is the case with the pdp8) or n+2 bits if there's 3 or 4 bytes per word.\
\
This is probably part of the reason why strings in Forth are normally stored in a length+byte array. This is also the case for AYT, byte 0 of a string contains the length and the string proper starts at byte 1.\
\
AYT provided a minimum number of primitives to handle strings.\
\
$@ ( n str -- ch) obtains the character at str[n].\
$! ( ch str -- ) stores ch at str[str[0]], ie it stores the character at the end of the string.\
len@ ( str -- len) returns the length of a string, it's equivalent to 0 str $@.\
len! ( n str --) sets the length of the string to n.\
Internally, the function STERM is provided to terminate strings - add a 0 character in the high word of a string if it has an even lenth. This allows strings to be compared more quickly. If it was going to be added to the vocab, it'd be called $0.\
\
}